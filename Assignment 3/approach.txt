# Outline

flag = 0 // Majority has been found
address[] voterAddr;
address[] candidateAddr;
struct Voters {
hasVoted = True
array = [1,3,-1,2,5]
}]

struct candidate {
address
numberOfVotes
}

mapping(address->Voter) voters;
mapping(Voter->Candidate) candidates;
Voter v1;
candidates[v1];

constructor
require(period == 0)
general body member -> right to vote.
chairperson -> acceptance or denial to right to vote.
pushTo(voterAddr)
gbm -> request for candidature
chairperson -> acceptance or denial to candidature.
if accepted -> candidates_array.push(gbm)

// Above part is over now (assuming this)

chairperson -> no more right to vote or candidature is given.
require(period == 1)

// Voting part

array[size]
uint[no_of_candidates] vote_ranking
require(array.length == no_of_candidates)
gbm -> 13425

//address[] voterAddr;
//mapping(address->Voter) voters;

// VotingPeriod Period period == 2
flag=0;
for v1 in voterAddr:
if voters[v1].hasVoted
candidateArr[voters[v1].preferences[0]].numberOfVotes += 1

DONE till here.

// Majority or Eliminated candidate index returned
min_index=0
min=candidateArr[0]
for c1 in candidate_array[]{
if(c1.numberofVotes is Majority)
flag = 1
return c1.index;
}
if(c1.numberofVotes < min){
min_index=c1.index
min=c1.numberofVotes
}
return min_index;

/// NOTE: Eliminating Candidates:

Delete With Shift

For n voters
string element = myArray[index];
for (uint i = index; i < myArray.length - 1; i++) {
myArray[i] = myArray[i + 1];
}
delete myArray[myArray.length - 1]; [1,4,5,6]->[1,4,5,0]
myArray.length--;[1,4,5]
return element;

/// INFO
If there is an exact tie for last place in numbers of votes, various tie-breaking rules determine which candidate to eliminate. The set of all candidates with the fewest first-order votes whose votes together total less than any other candidate's can be eliminated without changing the outcome. This bulk elimination can bypass irrelevant ties, for example if one candidate receives 15 first-order votes and four others receive 5, 5, 3, and 1, and no other candidate receives fewer than 15, all four of the latter candidates will be eliminated during the next four rounds, and so can be eliminated immediately without considering the tie.

4 6
13 13 -> 1st preference
2 4 -> 2nd preference

8 10
30 40

// INFO
If at any point two or more candidates or propositions are tied for the least popular position, the ballots in their piles are redistributed in a single step, all of the tied names being treated as eliminated. In the event of a tie in the winning position—which would imply that the elimination process is continued until the ballots are reduced to two or more equal piles—the election should be resolved in favor of the candidate or proposition that was strongest in terms of first choices (by referring to the record of the first distribution).

1 3 6 --0 4 6--
1 3 6

/ NOTE
Array of voterPreference is manipulated by first making all eliminated candidates 0.
This is done by iterating through the preference list, comparing with eliminated array.
Now make a tmp array, which is just the copy of this preference. If you encounter 0s, remove them.
Now copy tmp back to the original one. Use this tmp array for all preference order.
/

emit the Majority

1 3
15 15 // If first preference ranking is the same for both, re-elections.
10 9
2 2
